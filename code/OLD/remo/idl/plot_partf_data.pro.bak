; script: comparative plot of NIST, MOOG and Irwin's partition functions

; initialise element symbols, atomic numbers, etc.
@common_atom_elem
init_atom_elem

; ion symbols
ionSymbols = ['I', 'II', 'III' ]
numIon     = n_elements(ionSymbols)

; main directories
;;root_dir   = '~/Dropbox/Shared'
root_dir   = '~/People/barklem'
main_dir   = root_dir+'/Equilibrium/remo'
work_dir   = main_dir+'/molcalc_test'
data_dir   = main_dir+'/data'

; PS files, output directory and suffix
ps_dir     = main_dir+'/plots'
ps_suffix  = '_partf.eps'

; data directories and files
; NOTE: no global data file for MOOG, only individual files
dir_nist   = work_dir
dir_irwin  = data_dir+'/Irwin_partf'
dir_moog   = data_dir+'/MOOG_partf'

file_nist  = 'alldata.sav'
file_irwin = 'IRWIN_atoms.dat'


; temperature range for Irwin's data (fixed, see paper)
min_temp_irwin    = 1000.
max_temp_irwin    = 16000.
min_ln_temp_irwin = alog(min_temp_irwin)
max_ln_temp_irwin = alog(max_temp_irwin)

; MOOG: allocate arrays for partition function data
mtemp_moog    = 200L
ntemp_moog    = lonarr(numElem, numIon)
temp_moog     = fltarr(numElem, numIon, mtemp_moog)
data_moog     = fltarr(numElem, numIon, mtemp_moog)


; plot parameters ps files
encapsulated  = 1
landscape     = 0
font          = -1
default_thick = 3
charsize      = 1.4
charthick     = default_thick

; plot parameters, other
thick         = 5
thin          = 3
thick_nist    = 9 
thick_irwin   = 7 
thick_moog    = 7
xtitle        = 'Temperature [K]'
ytitle_top    = 'ln Q (partition function)'
ytitle_bot    = '$\Delta$ ln Q'
color_nist    = 'blu4'
color_irwin   = 'tomato'
color_moog    = 'grn4'
linest_nist   = '0'
linest_irwin  = '5'
linest_moog   = '2'

psym_moog     = 'filled circle'
syms_moog    = 1.2

; plot: x and y ranges
xmin          = 1.0e-2
xmax          = 1.0e+4
ymin_bot      = -0.8
ymax_bot      = +0.8
;ymin_top      = 
;ymax_top      =



; main program starts here
cd, current=current_dir

; read data

; read NIST data (IDL save file)
cd, dir_nist
restore, file_nist,/verbose

; NIST: rename variables for internal use
qatom_nist   = qatom
atomid_nist  = atomid
temp_nist    = t
ntemp_nist   = n_elements( temp_nist )
theta_nist   = 5040./temp_nist
ln_temp_nist = alog( temp_nist )
ln_qatom_nist= alog( qatom_nist )

; NIST array: temperature range 
min_temp_nist = min(temp_nist)
max_temp_nist = max(temp_nist)
min_ln_temp_nist = alog(min_temp_nist)
max_ln_temp_nist = alog(max_temp_nist)

; read Irwin's data
cd, dir_irwin
read_atom_irwin,fname=file_irwin,partfco=partfco_irwin,newlabel=atomid_irwin, $
                natom=natom_irwin,ncoef=nco_irwin,numco=numco_irwin

; read MOOG data
cd, dir_moog
; loop over all available metals and ionisation stages
for iel=0L,numElem-1L do begin
   elSym = elemSymbols[iel]
   file_moog12 = elSym+'-in'
   file_moog3  = elSym+'III-in'
; check if first file exists; if so, then read:
   chk_moog12 = file_info(file_moog12)
   if (chk_moog12.exists) then begin
      readcol,file_moog12,format='f,f,f',tmoog1,partf1,partf2
      ntmoog1 = n_elements(tmoog1)
; check if there are enough temperature and data points
      if (ntmoog1 gt 1) then begin
         ntmoog = ntmoog1-1
         ntemp_moog[iel,0] = ntmoog
         temp_moog[iel,0,0:ntmoog-1] = tmoog1[0:ntmoog-1]
         data_moog[iel,0,0:ntmoog-1] = partf1[0:ntmoog-1] 
         ntemp_moog[iel,1] = ntmoog
         temp_moog[iel,1,0:ntmoog-1] = tmoog1[0:ntmoog-1]
         data_moog[iel,1,0:ntmoog-1] = partf2[0:ntmoog-1] 
      endif
   endif else begin
      ntemp_moog[iel,0:1]   = 0L
      temp_moog [iel,0:1,*] = 0.
      data_moog [iel,0:1,*] = 0.
   endelse                      ; check if second file exists; if so, then read:
   chk_moog3 = file_info(file_moog3)
   if (chk_moog3.exists) then begin
      readcol,file_moog3,format='f,f',tmoog3,partf3
      ntmoog3 = n_elements(tmoog3)
; check if there are enough temperature and data points
      if (ntmoog3 gt 1) then begin
         ntmoog = ntmoog3-1
         ntemp_moog[iel,2] = ntmoog
         temp_moog [iel,2,0:ntmoog-1] = tmoog3[0:ntmoog-1]
         data_moog [iel,2,0:ntmoog-1] = partf3[0:ntmoog-1] 
      endif
   endif else begin
      ntemp_moog[iel,2]   = 0L
      temp_moog [iel,2,*] = 0.
      data_moog [iel,2,*] = 0.
   endelse
endfor

; read data: done
; return to original directory
cd, current_dir

; select elements / ions
iel_arr = [6, 7, 8, 11, 14, 21, 26, 37, 47, 55, 56, 57, 62, 63, 66, 67, 70 ] -1
iion_arr= [0, 1]
n_iel_arr = n_elements(iel_arr)
n_iion_arr= n_elements(iion_arr)

for i=0L,n_iel_arr-1 do begin
   for j=0L,n_iion_arr-1 do begin

      iel  = iel_arr[i]
      iion = iion_arr[j]

; element/ion symbol
      elSym = elemSymbols(iel)
      case elSym of
         'H'  : nion=2
         'D'  : nion=2
         'He' : nion=3
         else : nion=3
      endcase
      ionSym   = ionSymbols(iion)
      eliSym = elSym +'_' + ionSym
      print, iel, iion, elSym, ionSym, eliSym

; PS file
;;      ps_file = eliSym+'_partf.ps'
      ps_file = eliSym+ps_suffix


; index for element/ion in NIST array
      j_nist  = (where(atomid_nist eq eliSym))[0]

; index for element/ion in Irwin array
      j_irwin = (where(atomid_irwin eq strupcase(eliSym)))[0]

; evaluate Irwin polynomial fit at temp_nist temperature points
; note: set partition function to constant below min_temp_irwin)
      co_irwin = reform(partfco_irwin[*,j_irwin])
      qatom_irwin = exp( poly( (ln_temp_nist > min_ln_temp_irwin), co_irwin) )

; NIST partition function at MOOG temperatures (below max_temp_nist)
      ntmoog =        ntemp_moog[iel,iion]
      tmoog  = reform( temp_moog[iel,iion,0:ntmoog-1] )
      qmoog  = reform( data_moog[iel,iion,0:ntmoog-1] )
      min_tmoog = min(tmoog)
      max_tmoog = max(tmoog)
      min_ln_tmoog = alog(min_tmoog)
      max_ln_tmoog = alog(max_tmoog)
      qnist_tmoog  = exp(interpol(alog(qatom_nist[j_nist,*]),alog(temp_nist),alog(tmoog),/spline))

      qmoog_tnist  = exp(interpol(alog(qmoog),alog(tmoog), ln_temp_nist > min_ln_tmoog, /spline))

; plot
; open PS file
      cd, ps_dir
      cgPS_open, ps_file, encapsulated=encapsulated, landscape=landscape, $
                 font=font, charsize=charsize, default_thick=default_thick, $
                 /nomatch

; plot top panel
      cgplot,    temp_nist, alog(qatom_nist[j_nist,*]), linest=linest_nist, thick=thick_nist, col=color_nist, $
                 XTickformat='(A1)', ytitle=ytitle_top, title=elSym+' '+ionSym, $
                 /xlog, xrange=[xmin,xmax], ystyle=18, $
                 position=[0.15,0.32,0.90,0.90]
      ww_irwin = where(temp_nist ge min_temp_irwin)
      cww_irwin= where(temp_nist le min_temp_irwin)
      cgplot,/ov,temp_nist[ ww_irwin], alog( qatom_irwin[ ww_irwin]), linest=linest_nist, thick=thick_irwin, col=color_irwin
      cgplot,/ov,temp_nist[cww_irwin], alog( qatom_irwin[cww_irwin]), linest=linest_irwin, thick=thick_irwin, col=color_irwin
      cgplot,/ov,tmoog,alog(qmoog),psym=cgsymcat(psym_moog),col=color_moog,syms=syms_moog
      ww_moog = where(temp_nist ge min_tmoog)
      cww_moog= where(temp_nist le min_tmoog)
      cgplot,/ov,temp_nist,alog(qmoog_tnist), linest=linest_moog, thick=thick_moog, col=color_moog

; legend
      xloc   = xmin*2.0
      yloc   = !y.crange[0]+(!y.crange[1]-!y.crange[0])*0.9 ;0.275
      cgLegend, Title=['NIST', 'Irwin', 'MOOG'], $
                Lines=[linest_nist,linest_irwin,linest_moog], $
                PSym=[0,0,cgsymcat(psym_moog)], syms=syms_moog, $ ;syms=[1,1,syms_moog], $
                thick=thick_nist, $
                Color=[color_nist,color_irwin,color_moog], $
                charsize=charsize, charthick=charthick, vspace=1.8, length=0.125, $
                Location=[xloc,yloc], /Data, /background

; plot bottom panel
      cgplot,/noerase, [xmin,xmax], [0,0], linest=linest_nist, thick=thick_nist, col=color_nist, $
             xtitle=xtitle, ytitle=ytitle_bot, $
             /xlog, xrange=[xmin,xmax], yrange=[-1,1]*0.8, xstyle=8, $
             position=[0.15,0.15,0.90,0.32], xticklen=0.1
      cgplot,/ov,temp_nist[ ww_irwin], (alog(qatom_irwin/qatom_nist[j_nist,*]))[ ww_irwin], linest=linest_nist, thick=thick_irwin, col=color_irwin
      cgplot,/ov,temp_nist[cww_irwin], (alog(qatom_irwin/qatom_nist[j_nist,*]))[cww_irwin], linest=linest_irwin, thick=thick_irwin, col=color_irwin
      cgplot,/ov,tmoog,alog(qmoog/qnist_tmoog),psym=cgsymcat(psym_moog),col=color_moog,syms=syms_moog
      cgplot,/ov,temp_nist,alog(qmoog_tnist/qatom_nist[j_nist,*]), linest=linest_moog, thick=thick_moog, col=color_moog

;; fix y axes, missing bits?
;cgPlots, [0.15, 0.15], [0.30, 0.32], /Normal    ; Fix left axis.
;cgPlots, [0.90, 0.90], [0.30, 0.32], /Normal    ; Fix right axis.
      
; close PS file
cgPS_close

   endfor
endfor

; convert EPS files to PDF
cd, ps_dir
spawn,'for i in *'+suffix+'; do epstopdf $i ; done'

; end
cd, current_dir
end
