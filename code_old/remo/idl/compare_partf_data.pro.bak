; This script compares partition function data from the following
; sources:
;
; - NIST
; - Sneden's MOOG code
; - Irwin
; - Sauval and Tatum

@common_atom_elem

init_atom_elem

ionSymbols = ['I', 'II', 'III' ]
numIon     = n_elements(ionSymbols)

main_dir   = '~/People/barklem/Equilibrium/remo'
work_dir   = main_dir+'/'+'molcalc_test'
data_dir   = main_dir+'/'+'data'
datafile   = 'alldata.sav'

irw_dir    = data_dir+'/'+'Irwin_partf'
irw_file   = irw_dir +'/'+'IRWIN_atoms.dat'

moog_dir   = data_dir+'/'+'MOOG_partf'

ps_dir   = main_dir
psfile   = 'compare_partf_data.ps'


; list of ions for which we will use MOOG data instead of NIST for the
; final version of the partition functions 
ions_moog = [ 'Pr_II', 'Ho_II', 'Hf_III', 'Pt_III', 'Au_III', 'Th_I', 'Th_II', 'U_II' ]

; restore atomic partition functions computed from NIST data;
; among the restored variables:
;  t      = reference temperature scale
;  qatom  = atomic partition functions tabulated as a function of t
;  atomid = IDs of atoms and ions

cd, work_dir, current=current_dir
restore, datafile, /verbose

; the restored data should include the reference temperature scale t
nt    = n_elements( t )
theta = 5040./t
lnt   = alog(t)




; read Irwin atomic partition function data from file
read_atom_irwin,fname=irw_file,partfco=partfco_irw,newlabel=atomid_irw, $
                natom=natom_irw,ncoef=nco_irw,numco=numco_irw

; temperature scale for Irwin data
temp_irw_low     = 1000.
temp_irw_up      = 16000.
ln_temp_irw_up   = alog(temp_irw_up)
ln_temp_irw_low  = alog(temp_irw_low)
ntemp_irw        = 100L
ln_temp_irw      = findgen(ntemp_irw)/float(ntemp_irw-1) * $
                   (ln_temp_irw_up - ln_temp_irw_low) + ln_temp_irw_low
temp_irw         = exp( ln_temp_irw )




; read partition functions from MOOG
cd, moog_dir

mtemp_moog   = 200
moog_ntemp   = lonarr(numElem, numIon )
moog_data    = fltarr(numElem, numIon, mtemp_moog)
moog_temp    = fltarr(numElem, numIon, mtemp_moog)

; loop over all available metals and ionisation stages
for iel=0L,numElem-1L do begin
   elSym = elemSymbols[iel]
   file_moog12 = elSym+'-in'
   file_moog3  = elSym+'III-in'
; check if first file exists; if so, then read:
   chk_moog12 = file_info(file_moog12)
   if (chk_moog12.exists) then begin
      readcol,file_moog12,format='f,f,f',tmoog1,partf1,partf2
      ntmoog1 = n_elements(tmoog1)
; check if there are enough temperature and data points
      if (ntmoog1 gt 1) then begin
         ntmoog = ntmoog1-1
         moog_ntemp[iel,0] = ntmoog
         moog_temp [iel,0,0:ntmoog-1] = tmoog1[0:ntmoog-1]
         moog_data [iel,0,0:ntmoog-1] = partf1[0:ntmoog-1] 
         moog_ntemp[iel,1] = ntmoog
         moog_temp [iel,1,0:ntmoog-1] = tmoog1[0:ntmoog-1]
         moog_data [iel,1,0:ntmoog-1] = partf2[0:ntmoog-1] 
      endif
   endif
; check if second file exists; if so, then read:
   chk_moog3 = file_info(file_moog3)
   if (chk_moog3.exists) then begin
      readcol,file_moog3,format='f,f',tmoog3,partf3
      ntmoog3 = n_elements(tmoog3)
; check if there are enough temperature and data points
      if (ntmoog3 gt 1) then begin
         ntmoog = ntmoog3-1
         moog_ntemp[iel,2] = ntmoog
         moog_temp [iel,2,0:ntmoog-1] = tmoog3[0:ntmoog-1]
         moog_data [iel,2,0:ntmoog-1] = partf3[0:ntmoog-1] 
      endif
   endif
endfor





; open PS file for output and plot partition functions
cd, ps_dir
ps_start, filename=psfile, encapsulated=0, font=0
!p.thick  = 4
!x.minor  = 10
!y.minor  = 10

thick     = 6
thin      = 3

title     = ''
xtitle    = 'Temperature [K]'
ytitle    = 'Partition Function'
col_irw   = 'tomato'
col_moog  = 'ygb4'


; loop over elements and ionisation stages
for iel=0L,numElem-1L do begin
   elSym = elemSymbols[iel]
   case elSym of
      'H'  : nion=2
      'D'  : nion=2
      'He' : nion=3
      else : nion=3
   endcase
; loop over ionisation stages   
   for iion=0L,nion-1L do begin
      ionSym   = ionSymbols(iion)
      eliSym = elSym +'_' + ionSym
      print, eliSym
; NIST partf
      wweli  = where(atomid eq eliSym)
      qatom_nist  = reform(qatom[wweli,*])
; init Irwin and MOOG
      qatom_irw_t = qatom_nist
      qatom_moog_t= qatom_nist
; calculate partf based on Irwin data      
      wwirw  = where(atomid_irw eq strupcase(eliSym))
      co_irw = partfco_irw[*, wwirw]
      qatom_irw = exp( poly(ln_temp_irw, co_irw) )      
; overplot Irwin data, on reference temperature scale
      qatom_irw_t = exp( poly(lnt, co_irw) )
; set minimum value for qatom_irwin_t 
      ww_low_t = where(t lt temp_irw_low)
      qatom_irw_t[ww_low_t] = qatom_irw[0]

; MOOG partf
      ntemp_moog = moog_ntemp[iel,iion]
      if (ntemp_moog gt 0) then begin
         moog_temp_scale = moog_temp[iel,iion,0:ntemp_moog-1]
         moog_partf      = moog_data[iel,iion,0:ntemp_moog-1]
; interpolate to reference T scale
         moog_partf_t = exp(interpol(alog(moog_partf),alog(moog_temp_scale),lnt))
         qatom_moog_t = moog_partf_t
      endif

;
; plotting
;
; plot NIST partition function     
      title = eliSym
      ymin  = min([reform(qatom_nist),reform(qatom_irw_t),reform(qatom_moog_t)], max=ymax)
      ymin  = ymin*0.9
      ymax  = ymax*1.1      
      cgPlot, t, qatom_nist, thick=thick+2, title=title, xtitle=xtitle, ytitle=ytitle, $
              ystyle=2, /xlog, yr=[ymin,ymax]
; overplot Irwin data
      cgPlot, temp_irw, qatom_irw, color=col_irw, thick=thick+1, /overpl
; overplot Irwin data, on reference temperature scale
      cgPlot, t, qatom_irw_t, color=col_irw, thick=thick, linest=2, /overpl
; overplot MOOG data
      if (ntemp_moog gt 0) then begin
         cgPlot, moog_temp_scale, moog_partf, color=col_moog, thick=thick, ps=-8, /overpl
         cgPlot, t, qatom_moog_t, color=col_moog, thick=thick, linest=2, /overpl
      endif
      al_legend, ['NIST','Irwin','MOOG'], $
                 colors=['black', col_irw, col_moog], $
                 linest=[0, 0, 0], thick=[thick, thick, thick], /top, /left
   endfor
endfor
ps_end


; Compile final list of atomic partition functions
qatom_old = qatom               ; backup copy
qatom_new = qatom

;;ps_start,'~/Desktop/test.ps',encapsulated=0,font=1
; loop over metals
for iel=3L,numElem-1L do begin
   elSym = elemSymbols[iel]
; loop over ionisation stages   
   for iion=0L,numIon-1L do begin
      ionSym   = ionSymbols(iion)
      eliSym = elSym +'_' + ionSym
      ww = where(ions_moog eq eliSym, nww)
      if (nww eq 1) then begin
         wweli = where(atomid eq eliSym)
; MOOG partf
         ntemp_moog = moog_ntemp[iel,iion]
         if (ntemp_moog gt 0) then begin
            moog_temp_scale = moog_temp[iel,iion,0:ntemp_moog-1]
            moog_partf      = moog_data[iel,iion,0:ntemp_moog-1]
; interpolate to reference T scale
            moog_partf_t = exp(interpol(alog(moog_partf),alog(moog_temp_scale),lnt))
            qatom_moog_t = moog_partf_t
         endif
         ww = where(t gt 500)
         qatom_tmp      = reform( qatom_old[wweli,*] ) ;copy to temporary array
         qatom_tmp[ww]  = qatom_moog_t[ww]
         qatom_new[wweli, *] = qatom_tmp
;;         cgplot, t, qatom_new[wweli,*], thick=thick, /xlog, title=eliSym, xtitle=xtitle, ytitle=ytitle
;;         cgplot, t, qatom_old[wweli,*], ps=-8, /overplot, col='red4'
      endif
   endfor
endfor
;;ps_end


; overwrite qatom!

qatom = qatom_new


; create modified version of alldata.sav containing the following variables:
;  T
;  QATOM
;  ATOMID
;  ATOM_POTION

cd, work_dir
save, file='allatomdata_new.sav',t,qatom,atomid,atom_potion

cd, current_dir
end
